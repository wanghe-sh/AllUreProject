// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;



namespace Allure.UI.Controllers
{

    public partial class UserController
    {


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController() { }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UserController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }


        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Activate()
        {

            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Activate);

        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Login()
        {

            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);

        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EmailExists()
        {

            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EmailExists);

        }




        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController Actions { get { return MVC.User; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "user";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "user";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {


            public readonly string Register = ("Register").ToLowerInvariant();


            public readonly string Activate = ("Activate").ToLowerInvariant();


            public readonly string Login = ("Login").ToLowerInvariant();


            public readonly string FindPassword = ("FindPassword").ToLowerInvariant();


            public readonly string ResetPassword = ("ResetPassword").ToLowerInvariant();


            public readonly string EmailExists = ("EmailExists").ToLowerInvariant();


            public readonly string Logout = ("Logout").ToLowerInvariant();

        }




        static readonly ActionParamsClass_Register s_params_Register = new ActionParamsClass_Register();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Register RegisterParams { get { return s_params_Register; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Register
        {


            public readonly string reg = ("reg").ToLowerInvariant();

        }

        static readonly ActionParamsClass_Activate s_params_Activate = new ActionParamsClass_Activate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Activate ActivateParams { get { return s_params_Activate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Activate
        {


            public readonly string username = ("username").ToLowerInvariant();


            public readonly string token = ("token").ToLowerInvariant();

        }

        static readonly ActionParamsClass_Login s_params_Login = new ActionParamsClass_Login();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Login LoginParams { get { return s_params_Login; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Login
        {


            public readonly string returnUrl = ("returnUrl").ToLowerInvariant();


            public readonly string login = ("login").ToLowerInvariant();

        }

        static readonly ActionParamsClass_ResetPassword s_params_ResetPassword = new ActionParamsClass_ResetPassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ResetPassword ResetPasswordParams { get { return s_params_ResetPassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ResetPassword
        {


            public readonly string oldPassword = ("oldPassword").ToLowerInvariant();


            public readonly string newPassword = ("newPassword").ToLowerInvariant();

        }

        static readonly ActionParamsClass_EmailExists s_params_EmailExists = new ActionParamsClass_EmailExists();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EmailExists EmailExistsParams { get { return s_params_EmailExists; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EmailExists
        {


            public readonly string email = ("email").ToLowerInvariant();

        }



        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {

static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
public class _ViewNamesClass
{
public readonly string ActivateSuccess = "ActivateSuccess";
                public readonly string FindPassword = "FindPassword";
                public readonly string Login = "Login";
                public readonly string Register = "Register";
                public readonly string RegisterSuccess = "RegisterSuccess";
                public readonly string ResetPassword = "ResetPassword";
            
}
public readonly string ActivateSuccess = "~/Views/User/ActivateSuccess.cshtml";
            public readonly string FindPassword = "~/Views/User/FindPassword.cshtml";
            public readonly string Login = "~/Views/User/Login.cshtml";
            public readonly string Register = "~/Views/User/Register.cshtml";
            public readonly string RegisterSuccess = "~/Views/User/RegisterSuccess.cshtml";
            public readonly string ResetPassword = "~/Views/User/ResetPassword.cshtml";

        }
    }


    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UserController : Allure.UI.Controllers.UserController
    {
        public T4MVC_UserController() : base(Dummy.Instance) { }


        [NonAction]
        partial void RegisterOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Register()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Register);

            RegisterOverride(callInfo);

            return callInfo;

        }


        [NonAction]
        partial void RegisterOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Allure.UI.Models.UserRegister reg);

        [NonAction]
        public override System.Web.Mvc.ActionResult Register(Allure.UI.Models.UserRegister reg)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Register);


            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reg", reg);


            RegisterOverride(callInfo, reg);

            return callInfo;

        }


        [NonAction]
        partial void ActivateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string username, string token);

        [NonAction]
        public override System.Web.Mvc.ActionResult Activate(string username, string token)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Activate);


            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);

            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "token", token);


            ActivateOverride(callInfo, username, token);

            return callInfo;

        }


        [NonAction]
        partial void LoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string returnUrl);

        [NonAction]
        public override System.Web.Mvc.ActionResult Login(string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);


            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);


            LoginOverride(callInfo, returnUrl);

            return callInfo;

        }


        [NonAction]
        partial void LoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Allure.UI.Models.UserLogin login);

        [NonAction]
        public override System.Web.Mvc.ActionResult Login(Allure.UI.Models.UserLogin login)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);


            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "login", login);


            LoginOverride(callInfo, login);

            return callInfo;

        }


        [NonAction]
        partial void FindPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FindPassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FindPassword);

            FindPasswordOverride(callInfo);

            return callInfo;

        }


        [NonAction]
        partial void ResetPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResetPassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetPassword);

            ResetPasswordOverride(callInfo);

            return callInfo;

        }


        [NonAction]
        partial void ResetPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string oldPassword, string newPassword);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResetPassword(string oldPassword, string newPassword)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetPassword);


            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "oldPassword", oldPassword);

            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "newPassword", newPassword);


            ResetPasswordOverride(callInfo, oldPassword, newPassword);

            return callInfo;

        }


        [NonAction]
        partial void EmailExistsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string email);

        [NonAction]
        public override System.Web.Mvc.ActionResult EmailExists(string email)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EmailExists);


            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "email", email);


            EmailExistsOverride(callInfo, email);

            return callInfo;

        }


        [NonAction]
        partial void LogoutOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Logout()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Logout);

            LogoutOverride(callInfo);

            return callInfo;

        }


    }


}



#endregion T4MVC
#pragma warning restore 1591, 3008, 3009
